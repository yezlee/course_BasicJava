package e_oop;

//import가 올수있는 자리
//다른 클래스에 있는걸 쓸때 같은 패키지안에 있음 상관없는데 다른 패키지안에 들어있으면 임포트 해줘야함

public class SampleClass { //클래스만들때 첫글자는 항상 대문자
	//클래스안에 메인메소드가 있을수도 있고 없을수도 있다.
	/*메인메소드가 없다는건 여기서 만든 클래스를 다른곳에서 사용한다는 뜻
	이 클래스는 사용당하기 위해 만들어진 클래스
	*/
	
	//메인메소드를 만들어보자 - (지역변수가 뭔지 알아보려고)
	public static void main(String[] args){
		int local = 10 ; //지역변수 : 메소드 안에서만 사용할수 있는걸 지역변수. 로컬변수라고함.
		
	}
	
	//클래스 밖에서도 변수를 만들수있는데
	 int field;//전역변수 : 클래스 전체 영역에서 사용하는 변수  --메소드 밖에서 만들어진변수. 전체에서 사용가능. 메소드가 여러개 있어도 어디서도 사용가능
	 //이렇게 초기화하지 않아도 기본값으로 초기화된다. 지역변수는 반드시 초기화필요. 
	 //전역변수는 초가화 안해도 사용가능!
	 
	 boolean bool = false; //이게 기본값
	 String str = null; // string에선 null이 기본값
	 
	 
	 //오늘 중요한건 변수가 아니고 메소드임!!!!!!!!!!!!!!
	 
	 /*
	  * - 메소드 : 변수를 가지고 할 일 -- 음료수 심부름
	  * - 선언방법 : 리턴타입 메소드명(파라미터){}
	  * - 파라미터(매개변수) : 실행에 필요한 정보 -- 돈주고, 코카콜라, 몇리터짜리
	  * - 리턴타입(반환타입) : 실행 후 돌려줘야하는 결과물 -- 사온걸 돌려주는. 콜라를 주는게 리턴타입
	  */
	 
	 
	 //아래 void라는건 타입이 없단 뜻.
	 void method1(){ //타입을 적어줘야. 돌려줘야 하는데 안써줌. 없어.
		 System.out.println("파라미터도 리턴타입도 없는 메소드");
	 }
	 
	 //string을 적어준 이유는 : 돌려주는값의 타입을 적어주는거야. 리턴파라미터 뒤에 스트링 왔자나
	 String method2(int parameter){ //나는 일을하는데 이 데이터가 필요해 라고 적어줘
		 return parameter + " 를 받아 명령을 수행하고 결과물을 리턴하는 메소드"; //돌려주지만 그와 동시에 종료하는 역할도 함. 메소드 가장 마지막줄에 위치하게됨.
	 }
	 
	 
	 //문제 : flowTest1() 호출시 출력되는 문장을 순서대로 번호를 붙여주세요.
	 void flowTest1(){
		 System.out.println("flowTest1 시작 : 1 ");
		 flowTest3(); //1. 메소드안에 메소드 호출가능. 그럼 3번으로 가는거야. 6. 다시 여기로 돌아와
		 System.out.println("flowTest1 종료 : 6");
	 }
	 
	 void flowTest2(){ // 4. 여기서 출력하고 다끝나면
		 System.out.println("flowTest2 시작 : 3");
		 System.out.println("flowTest2 종료 : 4");
	 }
	 
	 void flowTest3(){
		 System.out.println("flowTest3 시작 : 2"); // 2. 여기서 2번 메소드 실행
		 flowTest2();// 3. 그리고 2번한테가  5.이제 이거 출력하고
		 System.out.println("flowTest3 종료 : 5");
	 }
	
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}
